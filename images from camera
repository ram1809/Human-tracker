import cv2
import os
import threading

# === Camera device paths ===
CAMERA_DEVICES = {
    "Cam0": "/dev/video0",
    "Cam1": "/dev/video2",
    "Cam2": "/dev/video4"
}

# === Output folders ===
OUTPUT_DIR = "captured_images"
# Define camera pairs and create folders
PAIR_FOLDERS = {
    "Cam0_1": ("Cam0", "Cam1"),
    "Cam1_2": ("Cam1", "Cam2")
}

for pair_folder in PAIR_FOLDERS:
    os.makedirs(os.path.join(OUTPUT_DIR, pair_folder), exist_ok=True)

# === Global state ===
frames = {}
selected_camera = "Cam0_1"  # Default selected camera
running = True
img_counters = {pair: 0 for pair in PAIR_FOLDERS}

# === Capture Thread Function ===
def camera_thread(cam_name, device_path):
    global frames, running
    cap = cv2.VideoCapture(device_path)
    if not cap.isOpened():
        print(f"‚ùå Failed to open {device_path} ({cam_name})")
        return
# Set camera properties for better image clarity
    cap.set(cv2.CAP_PROP_FPS, 30)  # Set FPS to 30 for smoother capture
    cap.set(cv2.CAP_PROP_AUTOFOCUS, 0)  # Disable autofocus (manual focus needed for sharpness)
    cap.set(cv2.CAP_PROP_FOCUS, 50)  # Set the focus level (try values between 0-255)
    cap.set(cv2.CAP_PROP_EXPOSURE, -4)  # Set exposure level (-4 might help reduce blur in bright conditions)
    cap.set(cv2.CAP_PROP_BRIGHTNESS, 0.5)  # Adjust brightness (range 0 to 1)
    cap.set(cv2.CAP_PROP_CONTRAST, 0.5)  # Adjust contrast (range 0 to 1)
    while running:
        ret, frame = cap.read()
        if ret:
            frames[cam_name] = frame
    cap.release()

# === Start Threads for Each Camera ===
threads = []
for name, path in CAMERA_DEVICES.items():
    t = threading.Thread(target=camera_thread, args=(name, path), daemon=True)
    t.start()
    threads.append(t)

print("‚úÖ Cameras initialized")
print("Press [1/2/3] to select camera")
print("Press [c] to capture image from selected camera")
print("Press [q] to quit")

# === Main Display & Control Loop ===
while True:
    camA, camB = PAIR_FOLDERS[selected_pair]
    frameA, frameB = frames.get(camA), frames.get(camB)

    if frameA is not None and frameB is not None:
        combined = cv2.hconcat([frameA, frameB])
        cv2.putText(combined, f"Pair: {selected_pair}", (10, 30),
                    cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 255, 255), 2)
        cv2.imshow("Camera Pair Viewer", combined)

    key = cv2.waitKey(1) & 0xFF

    if key == ord('q'):
        break
    elif key == ord('1'):
        selected_pair = "Cam0_1"
    elif key == ord('2'):
        selected_pair = "Cam1_2"
    elif key == ord(' ') and frameA is not None and frameB is not None:
        idx = img_counters[selected_pair]
        save_dir = os.path.join(OUTPUT_DIR, selected_pair)
        filenameA = os.path.join(save_dir, f"{camA}_image_{idx:03d}.jpg")
        filenameB = os.path.join(save_dir, f"{camB}_image_{idx:03d}.jpg")
        cv2.imwrite(filenameA, frameA)
        cv2.imwrite(filenameB, frameB)
        print(f"üì∏ Saved pair to {save_dir}:\n - {filenameA}\n - {filenameB}")
        img_counters[selected_pair] += 1
# === Cleanup ===
running = False
cv2.destroyAllWindows()
