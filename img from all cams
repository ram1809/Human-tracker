import cv2
import os
import threading

# === Camera device paths ===
CAMERA_DEVICES = {
    "Cam0": "/dev/video0",
    "Cam1": "/dev/video1",
    "Cam2": "/dev/video2"
}

# === Output folders ===
OUTPUT_DIR = "captured_images"
for cam_name in CAMERA_DEVICES:
    os.makedirs(os.path.join(OUTPUT_DIR, cam_name), exist_ok=True)

# === Global state ===
frames = {}
selected_camera = list(CAMERA_DEVICES.keys())[0]  # Default selected camera
running = True
img_counters = {name: 0 for name in CAMERA_DEVICES}

# === Capture Thread Function ===
def camera_thread(cam_name, device_path):
    global frames, running
    cap = cv2.VideoCapture(device_path)
    if not cap.isOpened():
        print(f"‚ùå Failed to open {device_path} ({cam_name})")
        return

    while running:
        ret, frame = cap.read()
        if ret:
            frames[cam_name] = frame
    cap.release()

# === Start Threads for Each Camera ===
threads = []
for name, path in CAMERA_DEVICES.items():
    t = threading.Thread(target=camera_thread, args=(name, path), daemon=True)
    t.start()
    threads.append(t)

print("‚úÖ Cameras initialized")
print("Press [1/2/3] to select camera")
print("Press [c] to capture image from selected camera")
print("Press [q] to quit")

# === Main Display & Control Loop ===
while True:
    frame = frames.get(selected_camera)
    if frame is not None:
        display = frame.copy()
        cv2.putText(display, f"Selected: {selected_camera}", (10, 30),
                    cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 255, 0), 2)
        cv2.imshow("Camera Viewer", display)

    key = cv2.waitKey(1) & 0xFF

    if key == ord('q'):
        break
    elif key == ord('1'):
        selected_camera = "Cam0"
    elif key == ord('2'):
        selected_camera = "Cam1"
    elif key == ord('3'):
        selected_camera = "Cam2"
    elif key == ord('c') and frame is not None:
        img_idx = img_counters[selected_camera]
        filename = os.path.join(OUTPUT_DIR, selected_camera, f"image_{img_idx:03d}.jpg")
        cv2.imwrite(filename, frame)
        print(f"üì∏ Saved: {filename}")
        img_counters[selected_camera] += 1

# === Cleanup ===
running = False
cv2.destroyAllWindows()
